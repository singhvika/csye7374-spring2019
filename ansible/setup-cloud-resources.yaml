---
  - name: Create Cloud Resources
    hosts:  localhost
    vars:
      clusterName: "{{clusterName}}"
      rdsSubnetGroup: "subnetGroup-rds-{{clusterName}}"
    tasks:
      - name: Get the security group ID for RDS instance
        shell: aws ec2 describe-instances --filters '[{"Name":"tag:KubernetesCluster","Values":["{{clusterName}}"]}, {"Name":"instance.group-name","Values":["nodes.{{clusterName}}"]}]' --query "Reservations[0].Instances[0].SecurityGroups[0].GroupId" | tr -d \"
        register: securityGroupRDS

      - name: Get any of the closest zones
        shell: aws ec2 describe-instances --filters '[{"Name":"tag:KubernetesCluster","Values":["{{clusterName}}"]}, {"Name":"instance.group-name","Values":["nodes.{{clusterName}}"]}]' --query 'Reservations[0].Instances[0].Placement.AvailabilityZone' | tr -d \"
        register: closeZone

      - name: Get VpcId
        shell:  aws ec2 describe-vpcs --filters '[{"Name":"tag:KubernetesCluster","Values":["{{clusterName}}"]}]' --query 'Vpcs[0].VpcId' | tr -d \"
        register: vpcId
           
      - name: Get Facts of VPC
        ec2_vpc_subnet_facts:
          filters:
            vpc-id: "{{vpcId.stdout}}"
        register: subnet_facts

      - name: Create RDS Subnet Group
        vars:
          subnet_ids: "{{ subnet_facts.subnets|map(attribute='id')|list }}"
        rds_subnet_group:
          name: "{{rdsSubnetGroup}}"
          description: Subnet Group for RDS
          region: us-east-1
          state: "present"
          subnets: "{{subnet_ids}}"

      - name: Create S3 bucket
        s3_bucket:
          name: "{{clusterName}}"
          state: present
          region: us-east-1
          tags:
            ClusterName: "{{clusterName}}"

      - name: "Create Full Access S3 roles for Ec2 instances"
        iam_role:
          name: s3FullAccess-{{clusterName}}

      - name: "Get Role ARN"
        shell: aws iam get-role --role-name s3FullAccess-{{clusterName}} | tr -d \"
        register: roleArn;

      - name: Attach Role to EC2 list
        ec2_instance:
          filters: 
            "tag:clusterName":  "nodes.{{clusterName}}"
          instance_role: "{{roleArn}}"

      - name: Create RDS Instance
        rds:
          command:  create
          instance_name:  rdskubernetes
          instance_type: db.t2.micro
          db_engine:  MySQL
          size: "100"
          multi_zone: no
          region: "us-east-1"
          zone: "{{closeZone.stdout}}"
          subnet: "{{rdsSubnetGroup}}"
          vpc_security_groups: "{{securityGroupRDS.stdout}}"
          username: "user12345678"
          password: "user12345678"
          tags:
            clusterName: "{{clusterName}}"
          wait: yes
...
